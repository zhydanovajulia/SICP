#lang racket
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(A 1 10); 1024
(A 2 4); 65536
(A 3 3); 65536

(define (f n) (A 0 n)); 2x
(define (g n) (A 1 n)); 2^n 
(define (h n) (A 2 n)); 2^(2^(2^(...n)



;A((- 2 1) A((- 2 1) A((- 2 1) (A(2 1)))))
;A((- 2 1) A((- 2 1) A((- 2 1) 2)))
;A((- 2 1) A((- 2 1) A(1 2)))
;A((- 2 1) A(1 4))
;A(1 16)

;(A (- 3 1) (A (- 3 1) (A (- 3 1) (- 2 1))))
;(A (- 3 1) (A (- 3 1) (A (- 3 1) 1)))
;(A (- 3 1) (A (- 3 1) (A 2 1)))
;(A (- 3 1) (A (- 3 1) 2))
;(A (- 3 1) 4)
;(A 2 4)





