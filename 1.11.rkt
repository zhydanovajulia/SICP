#lang racket
(define (f n) 
  (cond ((< n 3) n)
        (else (+ (f (- n 1)) (f (- n 2)) (f (- n 3))))))

(f 6)
;(+ (f (- 6 1)) (f (- 6 2)) (f (- 6 3)))
;(+ (f (- 6 1)) (f (- 6 2)) (f 3))
;(+ (f (- 6 1)) (f (- 6 2)) (+ (f (- 3 1)) (f (- 3 2)) (f (- 3 3))))
;(+ (f (- 6 1)) (f (- 6 2)) (+ (f (- 3 1)) (f (- 3 2)) (f 0)))
;(+ (f (- 6 1)) (f (- 6 2)) (+ (f (- 3 1)) (f 1) 0))
;(+ (f (- 6 1)) (f (- 6 2)) (+ (f 2) 1 0))
;(+ (f (- 6 1)) (f (- 6 2)) (+ 2 1 0))
;(+ (f (- 6 1)) (f 4) 3)
;(+ (f (- 6 1)) (+ (f (- 4 1)) (f (- 4 2)) (f (- 4 3))) 3)
;(+ (f (- 6 1)) (+ (f (- 4 1)) (f (- 4 2)) (f 1)) 3)
;(+ (f (- 6 1)) (+ (f (- 4 1)) (f (- 4 2)) 1) 3)
;(+ (f (- 6 1)) (+ (f (- 4 1)) (f 2) 1) 3)
;(+ (f (- 6 1)) (+ (f 3) 2 1) 3)
;(+ (f (- 6 1)) (+ (+ (f (- 3 1)) (f (- 3 2)) (f (- 3 3))) 2 1) 3)
;(+ (f (- 6 1)) (+ (+ (f (- 3 1)) (f (- 3 2)) (f 0)) 2 1) 3)
;(+ (f (- 6 1)) (+ (+ (f (- 3 1)) (f 1) 0) 2 1) 3)
;(+ (f (- 6 1)) (+ (+ (f 2) 1 0) 2 1) 3)
;(+ (f (- 6 1)) (+ (+ 2 1 0) 2 1) 3)
;(+ (f (- 6 1)) (+ 3 2 1) 3)
;(+ (f (- 6 1)) 6 3)
;(+ (f 5) 6 3)
;(+ (+ (f (- 5 1)) (f (- 5 2)) (f (- 5 3))) 6 3)
;(+ (+ (f (- 5 1)) (f (- 5 2)) (f 2)) 6 3)
;(+ (+ (f (- 5 1)) (f 3) 2) 6 3)
;(+ (+ (f (- 5 1)) (+ 2 1 0) 2) 6 3)
;(+ (+ (+ 3 2 1) 3 2) 6 3)
;(+ (+ 6 3 2) 6 3)
;(+ 11 6 3)
;20

(define (f_iter n) 
  (define (f_inner a b c counter)
    (cond ((< counter 3) a)
          (else (f_inner (+ a b c) a b (- counter 1)))))

  (cond ((< n 3) n)
        (else (f_inner 2 1 0 n))))

(f_iter 6) 
  
;---------------
; (f_iter 6)
;(cond ((< 6 3) a) (else (f_inner (+ 2 1 0) 2 1 (- 6 1))))
;(f_inner 3 2 1 5)
;(f_inner (+ 3 2 1) 3 2 (- 5 1))
;(f_inner 6 3 2 4)
;(f_inner (+ 6 3 2) 6 3 (- 4 1))  
;(f_inner 11 6 3 3)  
;(f_inner (+ 11 6 3) 11 6 (- 3 1))  
;(f_inner 20 11 6 2)
;20




